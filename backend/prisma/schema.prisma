// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  client
  admin
}

enum PostCondition {
  nuevo
  bueno
  satisfactorio
}

model User {
  user_id         Int      @id @default(autoincrement())
  user_name       String   @default("Test") @db.VarChar(256)
  user_email      String   @unique @db.VarChar(255)
  user_password   String   @db.VarChar(255)
  user_salt       String   @db.VarChar(255)
  user_created_at DateTime @default(now()) @db.Timestamptz(6)
  user_type       UserRole @default(client)
  user_active     Boolean  @default(true)

  // 1-1 Relation with the child tables in the hierarchy
  user_Admin  User_Admin?
  user_Client User_Client?
}

model User_Admin {
  user_id Int @unique

  // 1-1 Relation with User table
  user User @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
}

model User_Client {
  user_id      Int     @unique
  user_ranking Int?
  user_name    String  @db.VarChar(255)
  user_status  Boolean @default(true)
  user_photo   String  @db.VarChar(255)
  user_phone   String  @db.VarChar(20)

  // 1-1 Relation with User table
  user           User             @relation(fields: [user_id], references: [user_id], onDelete: Cascade)
  post           Post[]
  User_Favorites User_Favorites[]
  Review         Review[]
  Reservation    Reservation[]
  Purchase       Purchase[]
}

model Platform {
  platform_id   Int    @id @default(autoincrement())
  platform_name String @unique @db.VarChar(255)
  post          Post[]
}

model Genre {
  genre_id   Int    @id @default(autoincrement())
  genre_name String @unique @db.VarChar(255)
  post       Post[]
}

// model Platform_Genre {
//   platform_genre_id Int      @id @default(autoincrement())
//   platform_id       Int      @unique
//   platform          Platform @relation(fields: [platform_id], references: [platform_id])
//   genre_id          Int      @unique
//   genre             Genre    @relation(fields: [genre_id], references: [genre_id])
// }

model Post {
  post_id          Int           @id @default(autoincrement())
  user_id          Int
  platform_id      Int
  genre_id         Int
  post_title       String        @db.VarChar(255)
  post_photos      String[]      @db.VarChar(100)
  post_description String        @db.Text
  post_reserved    Boolean       @default(false)
  post_buyed       Boolean       @default(false)
  post_condition   PostCondition
  post_created_at  DateTime      @default(now()) @db.Timestamptz(6)
  post_price       Int
  post_status      Boolean       @default(true)

  user_client    User_Client?     @relation(fields: [user_id], references: [user_id])
  platform       Platform?        @relation(fields: [platform_id], references: [platform_id])
  genre          Genre?           @relation(fields: [genre_id], references: [genre_id])
  User_Favorites User_Favorites[]
  Review         Review[]
  Reservation    Reservation[]
  Purchase       Purchase[]
}

model User_Favorites {
  user_favorites_id Int         @id @default(autoincrement())
  post_id           Int
  user_id           Int
  post              Post        @relation(fields: [post_id], references: [post_id])
  user              User_Client @relation(fields: [user_id], references: [user_id])
}

model Review {
  review_id          Int      @id @default(autoincrement())
  user_buyer_id      Int
  post_id            Int
  review_title       String   @db.VarChar(50)
  review_description String   @db.Text
  review_punctuation Int      @default(0)
  review_created_at  DateTime @default(now()) @db.Timestamptz(6)
  review_status      Boolean  @default(true)

  post       Post        @relation(fields: [post_id], references: [post_id])
  user_buyer User_Client @relation(fields: [user_buyer_id], references: [user_id])
}

model Reservation {
  reservation_id         Int         @id @default(autoincrement())
  user_reserver_id       Int
  post_id                Int
  reservation_created_at DateTime    @default(now()) @db.Timestamptz(6)
  user                   User_Client @relation(fields: [user_reserver_id], references: [user_id])
  post                   Post        @relation(fields: [post_id], references: [post_id])
}

model Purchase {
  purchase_id         Int         @id @default(autoincrement())
  user_buyer_id       Int
  post_id             Int
  purchase_created_at DateTime    @default(now()) @db.Timestamptz(6)
  user                User_Client @relation(fields: [user_buyer_id], references: [user_id])
  post                Post        @relation(fields: [post_id], references: [post_id])
}
